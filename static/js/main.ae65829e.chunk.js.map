{"version":3,"sources":["components/TodoComponent/AddTodo.js","components/TodoComponent/TodoItem.js","components/TodoComponent/TodoList.js","pages/Todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","defineProperty","target","name","value","onSubmit","preventDefault","_this$state","state","text","status","todoList","localStorage","getItem","JSON","parse","Array","isArray","push","stringify","setItem","props","react_default","a","createElement","className","Form","Group","widths","Field","placeholder","autoComplete","Button","type","React","Component","TodoItem","item","TodoList","todos","length","map","key","TodoComponent_TodoItem","Layout","TodoComponent_AddTodo","TodoComponent_TodoList","App","Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae65829e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Button } from 'semantic-ui-react';\r\n\r\nclass AddTodo extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            text: '',\r\n            status: true\r\n        }\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { text, status } = this.state;\r\n        let todoList = localStorage.getItem('todos');\r\n        todoList = JSON.parse(todoList);\r\n\r\n        if (Array.isArray(todoList)) {\r\n            todoList.push({ text, status });\r\n        } else {\r\n            todoList = [{ text, status }];\r\n        }\r\n\r\n        todoList = JSON.stringify(todoList);\r\n        localStorage.setItem('todos', todoList);\r\n        this.setState({ text: '', status: true });\r\n        this.props.onSubmit();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-form\">\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group widths=\"equal\">\r\n                        <Form.Field>\r\n                            <input placeholder=\"Type here...\" name=\"text\" value={this.state.text} autoComplete=\"off\" onChange={this.onChange}/>\r\n                        </Form.Field>\r\n                        <Button type=\"submit\">Submit</Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n    render() {\r\n        const { item } = this.props;\r\n        return (\r\n            <div className=\"todo-item\">\r\n                <span className=\"checkbox\"></span>\r\n                <span className=\"todo-text\">{ item.text }</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends React.Component {\r\n    render() {\r\n        let todoList = this.props.todos;\r\n        let todos = 'No todos found!';\r\n        if (todoList && Array.isArray(todoList) && todoList.length) {\r\n            todos = todoList.map((item, key) => <TodoItem key={key} item={item} />);\r\n        }\r\n        return <div className=\"todo-items\">{ todos }</div>;\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\nimport AddTodo from './../components/TodoComponent/AddTodo';\r\nimport TodoList from './../components/TodoComponent/TodoList';\r\n\r\nclass Layout extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todos: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let todoList = localStorage.getItem('todos');\r\n        if (todoList) {\r\n            todoList = JSON.parse(todoList);\r\n            if (Array.isArray(todoList) && todoList.length) {\r\n                this.setState({todos: todoList});\r\n            }\r\n        }\r\n    }\r\n    onSubmit = () => {\r\n        let todoList = localStorage.getItem('todos');\r\n        if (todoList) {\r\n            todoList = JSON.parse(todoList);\r\n            if (Array.isArray(todoList) && todoList.length) {\r\n                this.setState({todos: todoList});\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"mt-10 content\">\r\n                    <span className=\"upper-case title mb-1\">Todo List</span>\r\n                    <AddTodo onSubmit={this.onSubmit}/>\r\n                    <TodoList todos={this.state.todos}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Component } from 'react';\nimport Todo from './pages/Todo';\nclass App extends Component {\n  render() {\n    return <Todo/>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}